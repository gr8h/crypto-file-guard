// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: fileguard.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FileGuard_NewSession_FullMethodName          = "/FileGuard/NewSession"
	FileGuard_AddFile_FullMethodName             = "/FileGuard/AddFile"
	FileGuard_ConstructMerkleTree_FullMethodName = "/FileGuard/ConstructMerkleTree"
	FileGuard_GetProof_FullMethodName            = "/FileGuard/GetProof"
	FileGuard_GetFile_FullMethodName             = "/FileGuard/GetFile"
	FileGuard_VerifyProof_FullMethodName         = "/FileGuard/VerifyProof"
)

// FileGuardClient is the client API for FileGuard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileGuardClient interface {
	NewSession(ctx context.Context, in *NewSessionRequest, opts ...grpc.CallOption) (*NewSessionResponse, error)
	AddFile(ctx context.Context, in *AddFileRequest, opts ...grpc.CallOption) (*AddFileResponse, error)
	ConstructMerkleTree(ctx context.Context, in *ConstructMerkleTreeRequest, opts ...grpc.CallOption) (*ConstructMerkleTreeResponse, error)
	GetProof(ctx context.Context, in *GetProofRequest, opts ...grpc.CallOption) (*GetProofResponse, error)
	GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*GetFileResponse, error)
	VerifyProof(ctx context.Context, in *VerifyProofRequest, opts ...grpc.CallOption) (*VerifyProofResponse, error)
}

type fileGuardClient struct {
	cc grpc.ClientConnInterface
}

func NewFileGuardClient(cc grpc.ClientConnInterface) FileGuardClient {
	return &fileGuardClient{cc}
}

func (c *fileGuardClient) NewSession(ctx context.Context, in *NewSessionRequest, opts ...grpc.CallOption) (*NewSessionResponse, error) {
	out := new(NewSessionResponse)
	err := c.cc.Invoke(ctx, FileGuard_NewSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileGuardClient) AddFile(ctx context.Context, in *AddFileRequest, opts ...grpc.CallOption) (*AddFileResponse, error) {
	out := new(AddFileResponse)
	err := c.cc.Invoke(ctx, FileGuard_AddFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileGuardClient) ConstructMerkleTree(ctx context.Context, in *ConstructMerkleTreeRequest, opts ...grpc.CallOption) (*ConstructMerkleTreeResponse, error) {
	out := new(ConstructMerkleTreeResponse)
	err := c.cc.Invoke(ctx, FileGuard_ConstructMerkleTree_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileGuardClient) GetProof(ctx context.Context, in *GetProofRequest, opts ...grpc.CallOption) (*GetProofResponse, error) {
	out := new(GetProofResponse)
	err := c.cc.Invoke(ctx, FileGuard_GetProof_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileGuardClient) GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*GetFileResponse, error) {
	out := new(GetFileResponse)
	err := c.cc.Invoke(ctx, FileGuard_GetFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileGuardClient) VerifyProof(ctx context.Context, in *VerifyProofRequest, opts ...grpc.CallOption) (*VerifyProofResponse, error) {
	out := new(VerifyProofResponse)
	err := c.cc.Invoke(ctx, FileGuard_VerifyProof_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileGuardServer is the server API for FileGuard service.
// All implementations must embed UnimplementedFileGuardServer
// for forward compatibility
type FileGuardServer interface {
	NewSession(context.Context, *NewSessionRequest) (*NewSessionResponse, error)
	AddFile(context.Context, *AddFileRequest) (*AddFileResponse, error)
	ConstructMerkleTree(context.Context, *ConstructMerkleTreeRequest) (*ConstructMerkleTreeResponse, error)
	GetProof(context.Context, *GetProofRequest) (*GetProofResponse, error)
	GetFile(context.Context, *GetFileRequest) (*GetFileResponse, error)
	VerifyProof(context.Context, *VerifyProofRequest) (*VerifyProofResponse, error)
	mustEmbedUnimplementedFileGuardServer()
}

// UnimplementedFileGuardServer must be embedded to have forward compatible implementations.
type UnimplementedFileGuardServer struct {
}

func (UnimplementedFileGuardServer) NewSession(context.Context, *NewSessionRequest) (*NewSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewSession not implemented")
}
func (UnimplementedFileGuardServer) AddFile(context.Context, *AddFileRequest) (*AddFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFile not implemented")
}
func (UnimplementedFileGuardServer) ConstructMerkleTree(context.Context, *ConstructMerkleTreeRequest) (*ConstructMerkleTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConstructMerkleTree not implemented")
}
func (UnimplementedFileGuardServer) GetProof(context.Context, *GetProofRequest) (*GetProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProof not implemented")
}
func (UnimplementedFileGuardServer) GetFile(context.Context, *GetFileRequest) (*GetFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedFileGuardServer) VerifyProof(context.Context, *VerifyProofRequest) (*VerifyProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyProof not implemented")
}
func (UnimplementedFileGuardServer) mustEmbedUnimplementedFileGuardServer() {}

// UnsafeFileGuardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileGuardServer will
// result in compilation errors.
type UnsafeFileGuardServer interface {
	mustEmbedUnimplementedFileGuardServer()
}

func RegisterFileGuardServer(s grpc.ServiceRegistrar, srv FileGuardServer) {
	s.RegisterService(&FileGuard_ServiceDesc, srv)
}

func _FileGuard_NewSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileGuardServer).NewSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileGuard_NewSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileGuardServer).NewSession(ctx, req.(*NewSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileGuard_AddFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileGuardServer).AddFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileGuard_AddFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileGuardServer).AddFile(ctx, req.(*AddFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileGuard_ConstructMerkleTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConstructMerkleTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileGuardServer).ConstructMerkleTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileGuard_ConstructMerkleTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileGuardServer).ConstructMerkleTree(ctx, req.(*ConstructMerkleTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileGuard_GetProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileGuardServer).GetProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileGuard_GetProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileGuardServer).GetProof(ctx, req.(*GetProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileGuard_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileGuardServer).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileGuard_GetFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileGuardServer).GetFile(ctx, req.(*GetFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileGuard_VerifyProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileGuardServer).VerifyProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileGuard_VerifyProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileGuardServer).VerifyProof(ctx, req.(*VerifyProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileGuard_ServiceDesc is the grpc.ServiceDesc for FileGuard service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileGuard_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FileGuard",
	HandlerType: (*FileGuardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewSession",
			Handler:    _FileGuard_NewSession_Handler,
		},
		{
			MethodName: "AddFile",
			Handler:    _FileGuard_AddFile_Handler,
		},
		{
			MethodName: "ConstructMerkleTree",
			Handler:    _FileGuard_ConstructMerkleTree_Handler,
		},
		{
			MethodName: "GetProof",
			Handler:    _FileGuard_GetProof_Handler,
		},
		{
			MethodName: "GetFile",
			Handler:    _FileGuard_GetFile_Handler,
		},
		{
			MethodName: "VerifyProof",
			Handler:    _FileGuard_VerifyProof_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fileguard.proto",
}

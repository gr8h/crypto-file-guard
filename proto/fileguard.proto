syntax = "proto3";

option go_package = "/pb";

// Hash represents the hash data. Assuming hash is a byte array.
message Hash { bytes value = 1; }

// MerkleNode represents a node in the Merkle tree.
message MerkleNode {
  MerkleNode left = 1;
  MerkleNode right = 2;
  Hash hash = 3;
}

// MerkleTree represents the structure of a Merkle tree.
message MerkleTree {
  MerkleNode root = 1;
  repeated Hash leaves = 2;
}

// Server represents the server managing files with a Merkle tree.
message ClientSession {
  repeated Hash files = 1;
  MerkleTree tree = 2;
  string storagePath = 3;
}

// Service definitions
service FileGuard {

  rpc NewSession(NewSessionRequest) returns (NewSessionResponse) {}

  rpc AddFile(AddFileRequest) returns (AddFileResponse) {}

  rpc ConstructMerkleTree(ConstructMerkleTreeRequest)
      returns (ConstructMerkleTreeResponse) {}

  rpc GetProof(GetProofRequest) returns (GetProofResponse) {}

  rpc GetFile(GetFileRequest) returns (GetFileResponse) {}

  rpc VerifyProof(VerifyProofRequest) returns (VerifyProofResponse) {}
}

message NewSessionRequest {}
message NewSessionResponse { SessionID sessionId = 1; }

message AddFileRequest {
  string sessionId = 1;
  bytes content = 2;
}

message AddFileResponse {}

message ConstructMerkleTreeRequest { string sessionId = 1; }

message ConstructMerkleTreeResponse { Hash rootHash = 1; }

message GetProofRequest {
  string sessionId = 1;
  int32 index = 2;
}

message GetProofResponse { repeated Hash proof = 1; }

message GetFileRequest {
  string sessionId = 1;
  int32 index = 2;
}

message GetFileResponse { bytes fileContent = 1; }

message VerifyProofRequest {
  string sessionId = 1;
  repeated Hash proof = 2;
  Hash targetHash = 3;
  Hash rootHash = 4;
}

message VerifyProofResponse { bool valid = 1; }
